1. CREATE TABLE automotive_app.reorder_alerts (

     alert_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

     product_id      VARCHAR2(50) NOT NULL,

     location_id     VARCHAR2(50) NOT NULL,

     current_stock NUMBER NOT NULL,

     reorder_level NUMBER NOT NULL,

     alert_timestamp TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,

     processed_flag CHAR(1) DEFAULT 'N' CHECK (processed_flag IN ('Y','N'))

);

---------------------main procedure----------------



/*====================================================================
=========================

      Procedure Name : USP_REORDER_ALERTS

      Purpose       : Checks INVENTORY_MASTER for products with current stock

                less than or equal to their reorder level. Stores alerts in REORDER_ALERTS.

                Outputs a message if no alerts found.

======================================================================
========================*/



CREATE OR REPLACE PROCEDURE AUTOMOTIVE_APP.USP_REORDER_ALERTS IS

     -- Cursor to fetch reorder items

     CURSOR cur_reorder_items IS

       SELECT PRODUCT_ID,

          LOCATION_ID,

          CURRENT_STOCK,

          REORDER_LEVEL,

        FROM AUTOMOTIVE_APP.INVENTORY_MASTER

       WHERE CURRENT_STOCK <= RE-ORDER_LEVEL;
 -- Collection type

 TYPE t_reorder_item_tab IS TABLE OF cur_reorder_items%ROWTYPE;

 l_reorder_items t_reorder_item_tab;



 c_batch_limit CONSTANT PLS_INTEGER := 1000;

 l_alert_count PLS_INTEGER := 0;



BEGIN

 -- Clear old unprocessed alerts (optional: keep history by removing this)

 DELETE FROM automotive_app.reorder_alerts

 WHERE processed_flag = 'N';

 COMMIT;



 OPEN cur_reorder_items;

 LOOP

  FETCH cur_reorder_items

  BULK COLLECT INTO l_reorder_items

  LIMIT c_batch_limit;



  EXIT WHEN l_reorder_items.COUNT = 0;



  FORALL i IN 1 .. l_reorder_items.COUNT

    INSERT INTO automotive_app.reorder_alerts (

        product_id,

        location_id,

        current_stock,

        reorder_level
     )

     VALUES (

          l_reorder_items(i).PRODUCT_ID,

          l_reorder_items(i).LOCATION_ID,

          l_reorder_items(i).CURRENT_STOCK,

          l_reorder_items(i).REORDER_LEVEL

     );



   l_alert_count := l_alert_count + l_reorder_items.COUNT;

   COMMIT;

 END LOOP;

 CLOSE cur_reorder_items;



 IF l_alert_count = 0 THEN

   DBMS_OUTPUT.PUT_LINE('          No reorder alerts found. All stock levels are healthy.');

 ELSE

   DBMS_OUTPUT.PUT_LINE('⚠ ' || l_alert_count || ' reorder alerts logged in
REORDER_ALERTS.');

 END IF;



EXCEPTION

 WHEN OTHERS THEN

   DBMS_OUTPUT.PUT_LINE('          Error in USP_REORDER_ALERTS: ' || SQLERRM);

   DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.format_error_backtrace);

   RAISE;

END USP_REORDER_ALERTS;
SCHEDULER:

BEGIN

    DBMS_SCHEDULER.create_job (

         job_name      => 'JOB_USP_REORDER_ALERTS',

         job_type     => 'STORED_PROCEDURE',

         job_action   => 'automotive_app.USP_REORDER_ALERTS',

         start_date   => SYSTIMESTAMP,

         repeat_interval => 'FREQ=DAILY;BYHOUR=6;BYMINUTE=0;BYSECOND=0',

         enabled      => TRUE,

         comments      => 'Daily reorder check for low stock items'

    );

END;

/

Note:

         1. This job will run every day at 6 AM.
         2. If no alerts are found, the procedure still logs “No alerts” in DBMS_OUTPUT
            (only visible if run manually).
         3. If alerts are found, they’re inserted into REORDER_ALERTS for reporting or
            notifications.
