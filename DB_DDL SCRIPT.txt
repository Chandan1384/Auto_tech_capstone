CREATE TABLE users (
    user_id     NUMBER PRIMARY KEY,
    created_by  VARCHAR2(50) NOT NULL
);

INSERT INTO users (user_id, created_by) VALUES (1, 'Admin');
INSERT INTO users (user_id, created_by) VALUES (2, 'Manager');
INSERT INTO users (user_id, created_by) VALUES (3, 'Clerk');
INSERT INTO users (user_id, created_by) VALUES (4, 'QA');
---------------------------------------------------------------
CREATE TABLE PRODUCTS (
    PRODUCT_ID         VARCHAR2(20),
    PRODUCT_NAME       VARCHAR2(100) NOT NULL,
    CATEGORY           VARCHAR2(30) NOT NULL,
    UNIT_COST          NUMBER(10,2) NOT NULL,
    WEIGHT_KG          NUMBER(8,3) NOT NULL,
    AUTOMOTIVE_GRADE   CHAR(1) NOT NULL,
    PRO_ACTIVE_STATUS  CHAR(1) DEFAULT 'Y' NOT NULL,
    CREATED_DATE       DATE DEFAULT SYSDATE NOT NULL,
    UPDATED_DATE       DATE,
    CONSTRAINT PK_PRODUCT PRIMARY KEY (PRODUCT_ID),
    CONSTRAINT CK_PRODUCT_AUTOGRADE CHECK (AUTOMOTIVE_GRADE IN ('Y','N')),
    CONSTRAINT CK_PRODUCT_STATUS CHECK (PRO_ACTIVE_STATUS IN ('Y','N')),
    CONSTRAINT CK_PRODUCT_UNIT_COST_POSITIVE CHECK (UNIT_COST >= 0),
    CONSTRAINT CK_PRODUCT_WEIGHT_POSITIVE CHECK (WEIGHT_KG >= 0)
);
-----------------------------------------------------------------------------------
CREATE TABLE LOCATIONS (
    LOCATION_ID     VARCHAR2(20),
    LOCATION_NAME   VARCHAR2(25) NOT NULL,
    LOCATION_TYPE   VARCHAR2(20) NOT NULL,
    COUNTRY         VARCHAR2(20) NOT NULL,
    SPECIALIZATION  VARCHAR2(50),
    CAPACITY        NUMBER(12) NOT NULL,
    LOC_ACTIVE_STATUS CHAR(1) DEFAULT 'Y' NOT NULL,
    CONSTRAINT PK_LOCATION PRIMARY KEY (LOCATION_ID),
    CONSTRAINT CK_LOCATION_CAPACITY CHECK (CAPACITY >= 0),
    CONSTRAINT CK_LOCATION_STATUS CHECK (LOC_ACTIVE_STATUS IN ('Y','N'))
);
----------------------------------------------------------------------------------------
CREATE TABLE SUPPLIERS (
    SUPPLIER_ID     VARCHAR2(20),
    SUPPLIER_NAME   VARCHAR2(200) NOT NULL,
    SUP_COUNTRY     VARCHAR2(50) NOT NULL,
    SUPPLIER_TYPE   VARCHAR2(30),
    QUALITY_RATING  NUMBER(2,1) NOT NULL,
    LEAD_TIME_DAYS  NUMBER(4) NOT NULL,
    PAYMENT_TERMS   VARCHAR2(30) NOT NULL,
    CERTIFICATION   VARCHAR2(50),
    SUP_ACTIVE_STATUS CHAR(1) DEFAULT 'Y',
    CONSTRAINT PK_SUPPLIER PRIMARY KEY (SUPPLIER_ID),
    CONSTRAINT CK_SUPPLIER_QLTYRATING CHECK (QUALITY_RATING BETWEEN 0 AND 5),
    CONSTRAINT CK_SUPPLIER_LEADTIME CHECK (LEAD_TIME_DAYS >= 0),
    CONSTRAINT CK_SUPPLIER_STATUS CHECK (SUP_ACTIVE_STATUS IN ('Y','N'))
);

-----------------------------------------------------------------------------------
CREATE TABLE INVENTORY_MASTER (
    INVENTORY_ID       VARCHAR2(20),
    PRODUCT_ID         VARCHAR2(20),
    LOCATION_ID        VARCHAR2(20),
    CURRENT_STOCK      NUMBER(12) NOT NULL,
    REORDER_LEVEL      NUMBER(12) NOT NULL,
    MAX_STOCK_LEVEL    NUMBER(12) NOT NULL,
    SAFETY_STOCK       NUMBER(12) NOT NULL,
    LAST_MOVEMENT_DATE DATE,
    UNIT_COST          NUMBER(10,2) NOT NULL,
    CONSTRAINT PK_INVENTORY_MASTER PRIMARY KEY (INVENTORY_ID),
    CONSTRAINT FK_INV_MASTER_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID),
    CONSTRAINT FK_INV_MASTER_LOCATION FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS(LOCATION_ID),
    CONSTRAINT UQ_INV_MASTER_PROD_LOC UNIQUE (PRODUCT_ID, LOCATION_ID),
    CONSTRAINT CK_INV_MASTER_CURRENT_STOCK CHECK (CURRENT_STOCK >= 0),
    CONSTRAINT CK_INV_MASTER_REORDER_LEVEL CHECK (REORDER_LEVEL >= 0),
    CONSTRAINT CK_INV_MASTER_MAX_STOCK CHECK (MAX_STOCK_LEVEL >= REORDER_LEVEL),
    CONSTRAINT CK_INV_MASTER_SAFETY_STOCK CHECK (SAFETY_STOCK >= 0 AND SAFETY_STOCK <= MAX_STOCK_LEVEL),
    CONSTRAINT CK_INV_MASTER_UNIT_COST CHECK (UNIT_COST >= 0)
);
-----------------------------------------------------------------------------------------------------------
CREATE TABLE INVENTORY_TRANSACTIONS (
    TRANSACTION_ID     VARCHAR2(20),
    PRODUCT_ID         VARCHAR2(20),
    LOCATION_ID        VARCHAR2(20),
    TRANSACTION_TYPE   VARCHAR2(15) NOT NULL,
    QUANTITY           NUMBER(12) NOT NULL,
    UNIT_COST          NUMBER(10,2) NOT NULL,
    TRANSACTION_DATE   DATE NOT NULL,
    REFERENCE_NO       VARCHAR2(50) NOT NULL,
    TRANS_CREATED_BY   VARCHAR2(100) NOT NULL,
    CONSTRAINT PK_INV_TXN PRIMARY KEY (TRANSACTION_ID),
    CONSTRAINT FK_INV_TXN_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID),
    CONSTRAINT FK_INV_TXN_LOCATION FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS(LOCATION_ID),
    CONSTRAINT CK_INV_TXN_TYPE CHECK (TRANSACTION_TYPE IN ('RECEIPT','ISSUE','TRANSFER')),
    CONSTRAINT CK_INV_TXN_QTY CHECK (QUANTITY <> 0),
    CONSTRAINT CK_INV_TXN_UNIT_COST CHECK (UNIT_COST >= 0)
);
-----------------------------------------------------------------------------------------------
CREATE INDEX IDX_INV_TXN_PROD_LOC_DATE 
    ON INVENTORY_TRANSACTIONS (PRODUCT_ID, LOCATION_ID, TRANSACTION_DATE);
    -------------------------------------------------------------
CREATE TABLE PURCHASE_ORDER (
    PO_NUMBER      VARCHAR2(20),
    SUPPLIER_ID    VARCHAR2(20),
    ORDER_DATE     DATE NOT NULL,
    EXPECTED_DATE  DATE,
    ACTUAL_DATE    DATE,
    TOTAL_AMOUNT   NUMBER(12,2),
    ORDER_STATUS   VARCHAR2(20),
    PUR_CREATED_BY VARCHAR2(20) NOT NULL,
    CONSTRAINT PK_PURCHASE_ORDER PRIMARY KEY (PO_NUMBER),
    CONSTRAINT FK_PO_SUPPLIER FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIERS(SUPPLIER_ID),
    CONSTRAINT CK_PO_TOTAL_AMOUNT CHECK (TOTAL_AMOUNT >= 0),
    CONSTRAINT CK_PO_STATUS CHECK (ORDER_STATUS IN ('PENDING','DELIVERED','CANCELLED'))
);
----------------------------------------------------------------------------------------
CREATE TABLE SUPPLIER_PERFORMANCE (
    PERFORMANCE_ID      VARCHAR2(20),
    SUPPLIER_ID         VARCHAR2(20),
    PO_NUMBER           VARCHAR2(20),
    DELIVERY_DATE       DATE,
    PROMISED_DATE       DATE,
    QUALITY_RATING      NUMBER(3,1),
    QUANTITY_DELIVERED  NUMBER(12),
    QUANTITY_REJECTED   NUMBER(12),
    PERFORMANCE_MONTH   DATE,
    CONSTRAINT PK_SUPPLIER_PERF PRIMARY KEY (PERFORMANCE_ID),
    CONSTRAINT FK_SUPP_PERF_SUPPLIER FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIERS(SUPPLIER_ID),
    CONSTRAINT FK_SUPP_PERF_PO FOREIGN KEY (PO_NUMBER) REFERENCES PURCHASE_ORDER(PO_NUMBER),
    CONSTRAINT CK_SUPP_PERF_QUALITY CHECK (QUALITY_RATING >= 0 AND QUALITY_RATING <= 5),
    CONSTRAINT CK_SUPP_PERF_QTY_DELIVERED CHECK (QUANTITY_DELIVERED >= 0),
    CONSTRAINT CK_SUPP_PERF_QTY_REJECTED CHECK (QUANTITY_REJECTED >= 0)
);
----------------------------------------------------------------------------------------------
CREATE TABLE PO_LINE_ITEMS (
    LINE_ID      VARCHAR2(20) NOT NULL,
    PO_NUMBER    VARCHAR2(20) NOT NULL,
    PRODUCT_ID   VARCHAR2(20) NOT NULL,
    PO_QTY       NUMBER(12) NOT NULL,
    UNIT_PRICE   NUMBER(10,2) NOT NULL,
    LINE_TOTAL   NUMBER(12,2),
    CONSTRAINT PK_PO_LINE PRIMARY KEY (LINE_ID),
    CONSTRAINT FK_POLINE_PO FOREIGN KEY (PO_NUMBER) REFERENCES PURCHASE_ORDER (PO_NUMBER),
    CONSTRAINT FK_POLINE_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (PRODUCT_ID),
    CONSTRAINT CK_POLINE_QTY CHECK (PO_QTY > 0),
    CONSTRAINT CK_POLINE_UNIT_PRICE CHECK (UNIT_PRICE >= 0),
    CONSTRAINT CK_POLINE_TOTAL CHECK (LINE_TOTAL >= 0)
);

COMMENT ON COLUMN PO_LINE_ITEMS.LINE_ID IS 'Identifier for a specific item or product line within the purchase order';
COMMENT ON COLUMN PO_LINE_ITEMS.UNIT_PRICE IS 'Cost of one unit of the product being ordered on this PO line (per unit agreed price)';
COMMENT ON COLUMN PO_LINE_ITEMS.LINE_TOTAL IS 'Total line cost = PO_QTY (ordered quantity) Ã— UNIT_PRICE (per unit agreed price)';

CREATE TABLE STOCK_TRANSFERS (
    TRANSFER_ID     VARCHAR2(20),
    PRODUCT_ID      VARCHAR2(20)        NOT NULL,
    FROM_LOCATION   VARCHAR2(20)        NOT NULL,
    TO_LOCATION     VARCHAR2(20)        NOT NULL,
    TRANS_QUANTITY  NUMBER(12)          NOT NULL,
    TRANSFER_DATE   DATE DEFAULT SYSDATE NOT NULL,
    APPROVED_BY     VARCHAR2(50)        NOT NULL,
    STATUS          VARCHAR2(20)        NOT NULL,
    CONSTRAINT PK_STOCK_TRANSFERS PRIMARY KEY (TRANSFER_ID),
    CONSTRAINT FK_STOCKTRANS_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (PRODUCT_ID),
    CONSTRAINT FK_STOCKTRANS_FROM_LOC FOREIGN KEY (FROM_LOCATION) REFERENCES LOCATIONS (LOCATION_ID),
    CONSTRAINT FK_STOCKTRANS_TO_LOC FOREIGN KEY (TO_LOCATION) REFERENCES LOCATIONS (LOCATION_ID),
    CONSTRAINT CK_STOCKTRANS_QTY CHECK (TRANS_QUANTITY > 0),
    CONSTRAINT CK_STOCKTRANS_DIFF_LOC CHECK (FROM_LOCATION <> TO_LOCATION),
    CONSTRAINT CK_STOCKTRANS_STATUS CHECK (STATUS IN ('PENDING', 'APPROVED', 'COMPLETED', 'CANCELLED'))
);

COMMENT ON COLUMN STOCK_TRANSFERS.TRANS_QUANTITY IS 'Stock transfer quantity (number of units moved from one location to another)';
COMMENT ON COLUMN STOCK_TRANSFERS.STATUS IS 'Current status of the stock transfer: PENDING, APPROVED, COMPLETED, or CANCELLED';

CREATE TABLE RND_PROJECTS (
    PROJECT_ID        VARCHAR2(20),
    PROJECT_NAME      VARCHAR2(100) NOT NULL,
    PRODUCT_LINE      VARCHAR2(100),
    START_DATE        DATE NOT NULL,
    TARGET_DATE       DATE,
    BUDGET_ALLOCATED  NUMBER(14,2) DEFAULT 0,
    BUDGET_SPENT      NUMBER(14,2) DEFAULT 0,
    PROJECT_STATUS    VARCHAR2(20) NOT NULL,
    DESCRIPTION       VARCHAR2(500),
    CONSTRAINT PK_RND_PROJECTS PRIMARY KEY (PROJECT_ID),
    CONSTRAINT CK_RND_BUDGET_ALLOCATED CHECK (BUDGET_ALLOCATED >= 0),
    CONSTRAINT CK_RND_BUDGET_SPENT CHECK (BUDGET_SPENT >= 0),
    CONSTRAINT CK_RND_PROJECT_STATUS CHECK (PROJECT_STATUS IN ('PLANNING','ACTIVE','COMPLETED','ON_HOLD','CANCELLED'))
);

COMMENT ON COLUMN RND_PROJECTS.PRODUCT_LINE IS 'Indicates which product line is associated with this R&D project';

CREATE TABLE RND_ALLOCATION (
    ALLOCATION_ID    VARCHAR2(20),
    PROJECT_ID       VARCHAR2(20) NOT NULL,
    PRODUCT_ID       VARCHAR2(20) NOT NULL,
    ALLOCATED_QTY    NUMBER(12) NOT NULL,
    ALLOCATION_DATE  DATE DEFAULT SYSDATE NOT NULL,
    CONSUMED_QTY     NUMBER(12) DEFAULT 0,
    STATUS           VARCHAR2(20) NOT NULL,
    CONSTRAINT PK_RND_ALLOCATION PRIMARY KEY (ALLOCATION_ID),
    CONSTRAINT FK_RNDALLOC_PROJECT FOREIGN KEY (PROJECT_ID) REFERENCES RND_PROJECTS(PROJECT_ID),
    CONSTRAINT FK_RNDALLOC_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID),
    CONSTRAINT CK_RNDALLOC_ALLOCQTY CHECK (ALLOCATED_QTY > 0),
    CONSTRAINT CK_RNDALLOC_CONSQTY CHECK (CONSUMED_QTY >= 0),
    CONSTRAINT CK_RNDALLOC_STATUS CHECK (STATUS IN ('ALLOCATED','IN_USE','COMPLETED','CANCELLED'))
);

COMMENT ON COLUMN RND_ALLOCATION.STATUS IS 'Indicates the current stage of the allocation lifecycle: ALLOCATED (reserved), IN_USE (actively used), COMPLETED (fully utilized), or CANCELLED (no longer active)';

CREATE TABLE AUDIT_TRAIL (
    AUDIT_ID        VARCHAR2(20),
    TABLE_NAME      VARCHAR2(50) NOT NULL,
    OPERATION_TYPE  VARCHAR2(20) NOT NULL,
    OLD_VALUES      CLOB,
    NEW_VALUES      CLOB,
    CHANGED_BY      VARCHAR2(50) NOT NULL,
    CHANGE_DATE     DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT PK_AUDIT_TRAIL PRIMARY KEY (AUDIT_ID),
    CONSTRAINT CK_AUDIT_OPTYPE CHECK (OPERATION_TYPE IN ('INSERT','UPDATE','DELETE'))
);

